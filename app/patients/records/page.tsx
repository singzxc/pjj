"use client";

import { useState, ChangeEvent, useEffect } from "react";
import DashboardCard from "@/components/DashboardCard";
import { useAuth } from "@/app/contexts/AuthContext";
import { useRouter } from "next/navigation";
import { Assessment, Role } from "@prisma/client";

// (Enum InjuryArea ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
enum InjuryArea {
  KNEE = "‡∏Ç‡πâ‡∏≠‡πÄ‡∏Ç‡πà‡∏≤",
  SHOULDER = "‡∏Ç‡πâ‡∏≠‡πÑ‡∏´‡∏•‡πà",
  ELBOW = "‡∏Ç‡πâ‡∏≠‡∏®‡∏≠‡∏Å",
  ANKLE = "‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πâ‡∏≤",
  BACK = "‡∏´‡∏•‡∏±‡∏á",
  WRIST = "‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠",
  HIP = "‡∏Ç‡πâ‡∏≠‡∏™‡∏∞‡πÇ‡∏û‡∏Å",
  OTHERS = "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
}

// (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User Profile ‡∏™‡∏°‡∏°‡∏ï‡∏¥)
const fakePatientData = {
  nameTh: "‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ",
  age: 35,
  gender: "‡∏ä‡∏≤‡∏¢",
  hn: "HN15782",
  anamnesis: "‡πÑ‡∏°‡πà‡∏°‡∏µ",
  chiefComplaint: "‡∏Ç‡πâ‡∏≠‡πÄ‡∏Ç‡πà‡∏≤",
};

export default function RecordHealthPage() {
  const { user, isLoading: isAuthLoading, token } = useAuth();
  const router = useRouter();

  const [selectedArea, setSelectedArea] = useState<InjuryArea | null>(null);
  const [painScore, setPainScore] = useState(0);
  const [files, setFiles] = useState<File[]>([]); // <-- State ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  const [results, setResults] = useState<Assessment[]>([]);
  const [historyLoading, setHistoryLoading] = useState(true);

  // (useEffect ... ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ... ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  useEffect(() => {
    const fetchHistory = async () => {
      if (user && token) {
        setHistoryLoading(true);
        try {
          const res = await fetch('/api/patients/assessment', {
            headers: { 'Authorization': `Bearer ${token}` }
          });
          if (!res.ok) throw new Error("Failed to fetch assessment history");
          const data: Assessment[] = await res.json();
          setResults(data);
        } catch (err: any) {
          setError(err.message);
        } finally {
          setHistoryLoading(false);
        }
      }
    };
    
    if (!isAuthLoading) {
      fetchHistory();
    }
  }, [user, token, isAuthLoading]);

  // (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
  if (isAuthLoading) return <div>Loading...</div>;
  if (!user) {
    router.push('/sign-in');
    return null;
  }

  // (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handle... ‡∏ï‡πà‡∏≤‡∏á‡πÜ ... ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  const handleInjurySelect = (area: InjuryArea) => {
    setSelectedArea(area);
    setPainScore(0);
    setFiles([]);
    setError(null);
  };
  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) setFiles(Array.from(e.target.files));
  };

  // --- üìç (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô "‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô" ---
  const handleStartAssessment = async () => {
    if (!selectedArea) return;

    setLoading(true);
    setError(null);
    let uploadedFileUrl: string | null = null; // 1. ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö URL

    try {
      // --- 2. ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ---
      if (files.length > 0) {
        const file = files[0];
        // 2.1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API Upload ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        const uploadResponse = await fetch(
          `/api/upload?filename=${file.name}`,
          {
            method: 'POST',
            body: file, // 2.2. ‡∏™‡πà‡∏á 'File' ‡πÑ‡∏õ‡∏ï‡∏£‡∏á‡πÜ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON)
          }
        );

        if (!uploadResponse.ok) throw new Error('Failed to upload file');
        
        const blob = await uploadResponse.json();
        uploadedFileUrl = blob.url; // 2.3. ‡πÄ‡∏Å‡πá‡∏ö URL ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
      }

      // --- 3. ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Assessment (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° fileUrl) ---
      const assessmentResponse = await fetch('/api/patients/assessment', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ 
          injuryArea: selectedArea,
          painScore: painScore,
          fileUrl: uploadedFileUrl // 3.1. ‡∏™‡πà‡∏á URL ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡πÄ‡∏Å‡πá‡∏ö
        }),
      });

      if (!assessmentResponse.ok) throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ");
      
      const newAssessment = await assessmentResponse.json();
      router.push(`/patients/assessment/${newAssessment.id}`);

    } catch (err: any) {
      setError(err.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
    } finally {
      setLoading(false);
    }
  };


  return (
    <div className="p-4 md:p-8">
      {/* ... (‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß, ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß, ‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£ ... ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ... */}
       <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold text-slate-800">‡πÅ‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</h1>
        <button className="bg-blue-800 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-900">
          üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å
        </button>
      </div>
      <DashboardCard title="" className="mb-6">
        <div className="flex gap-4 items-center">
          <div className="w-20 h-20 bg-blue-200 border-4 border-white rounded-md flex-shrink-0 shadow-lg" />
          <div>
            <p><strong>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</strong> {fakePatientData.nameTh} (‡∏≠‡∏≤‡∏¢‡∏∏: {fakePatientData.age} ‡∏õ‡∏µ) <strong>‡πÄ‡∏û‡∏®:</strong> {fakePatientData.gender}</p>
            <p><strong>HN:</strong> {fakePatientData.hn}</p>
            <p><strong>‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß:</strong> {fakePatientData.anamnesis}</p>
            <p><strong>‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏à‡πá‡∏ö:</strong> {fakePatientData.chiefComplaint}</p>
          </div>
        </div>
      </DashboardCard>
      <DashboardCard title="‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö" className="mb-6">
        <p className="text-gray-600 mb-4">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏£</p>
        <div className="flex flex-wrap gap-3">
          {Object.values(InjuryArea).map((area) => (
            <button
              key={area}
              onClick={() => handleInjurySelect(area)}
              disabled={loading}
              className="bg-blue-800 text-white px-6 py-2 rounded-full shadow-md hover:bg-blue-900 disabled:opacity-50"
            >
              {area}
            </button>
          ))}
        </div>
        {error && <p className="text-red-500 mt-4">{error}</p>}
      </DashboardCard>
      
      {/* --- üìç ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• --- */}
      <DashboardCard title="‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô" className="mb-6">
        <div className="overflow-x-auto overflow-y-auto max-h-96 border rounded-lg">
          <table className="min-w-full divide-y divide-gray-200">
            {/* <thead> ... ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ... </thead> */}
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏≠‡∏≤‡∏Å‡∏≤‡∏£</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (Pain)</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
              </tr>
            </thead>
            
            {/* <tbody> ... ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ... </tbody> */}
            <tbody className="bg-white divide-y divide-gray-200">
              {historyLoading ? (
                <tr><td colSpan={5} className="text-center p-4">Loading history...</td></tr>
              ) : results.length === 0 ? (
                <tr><td colSpan={5} className="text-center p-4 text-gray-500">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</td></tr>
              ) : (
                results.map((item) => (
                  <tr 
                    key={item.id} 
                    onClick={() => router.push(`/patients/assessment/${item.id}`)}
                    className="cursor-pointer hover:bg-gray-50"
                  >
                    <td className="px-6 py-4 whitespace-nowrap text-sm">{new Date(item.createdAt).toLocaleDateString("th-TH")}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm">{item.injuryArea}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm">{item.formType}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm">{item.painScore ?? '-'}</td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                        item.status === 'COMPLETED' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                      }`}>
                        {item.status === 'COMPLETED' ? '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô' : '‡∏£‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô'}
                      </span>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </DashboardCard>

      {/* ... (‡∏™‡πà‡∏ß‡∏ô Conditional Rendering ... ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ... */}
      {selectedArea && (
        <DashboardCard title={selectedArea} className="mb-6">
          {/* ... (‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå) ... */}
          <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center mb-6">
            <svg className="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48" aria-hidden="true">
              <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
            </svg>
            <p className="mt-2 text-sm text-gray-600">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠</p>
            <input 
              type="file" 
              multiple 
              onChange={handleFileChange} 
              className="hidden" 
              id="file-upload"
            />
            <label 
              htmlFor="file-upload" 
              className="mt-4 cursor-pointer bg-blue-800 text-white px-6 py-2 rounded-full shadow-md hover:bg-blue-900 text-sm"
            >
              ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
            </label>
            <div className="mt-2 text-xs text-gray-500">
              {files.length > 0 ? files.map(f => f.name).join(', ') : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå'}
            </div>
          </div>
          {/* ... (‡∏™‡πà‡∏ß‡∏ô Pain Score) ... */}
          <div className="mb-6">
            <label htmlFor="painscore" className="block text-lg font-semibold text-gray-700 mb-4">Painscore</label>
            <div className="flex justify-between text-xs text-gray-500 mb-2 px-1">
              <span>‡πÑ‡∏°‡πà‡∏õ‡∏ß‡∏î</span>
              <span>‡∏õ‡∏ß‡∏î‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</span>
            </div>
            <input
              id="painscore"
              type="range"
              min="0"
              max="10"
              value={painScore}
              onChange={(e) => setPainScore(Number(e.target.value))}
              className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
            />
            <div className="flex justify-between text-xs px-1 mt-1">
              {[...Array(11)].map((_, i) => (
                <span key={i} className="text-gray-500">{i}</span>
              ))}
            </div>
            <div className="text-center text-xl font-bold mt-4 text-blue-800">
              ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {painScore}
            </div>
          </div>
          {/* ... (‡∏õ‡∏∏‡πà‡∏° Submit) ... */}
          <div className="text-center">
            <button
              onClick={handleStartAssessment}
              disabled={loading}
              className="bg-blue-800 text-white px-8 py-3 rounded-full shadow-lg hover:bg-blue-900 disabled:opacity-50 text-lg font-semibold"
            >
              {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"}
            </button>
            {error && <p className="text-red-500 mt-4">{error}</p>}
          </div>
        </DashboardCard>
      )}

    </div>
  );
}

